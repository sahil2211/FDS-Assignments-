?cor
cor(mergeState$PeakLevel, mergeState$population2015)
cor(mergeState)
GFTdata <- read.csv("data.txt", head = TRUE, sep = ",", skip=588)
header <- read.csv("data.txt", nrows = 1, header = FALSE, sep =',', stringsAsFactors = FALSE)
colnames(GFTdata) <- unlist(header)
GFTdata <- read.csv("data.txt", head = TRUE, sep = ",", skip=588)
newurl <- getURL("https://en.wikipedia.org/wiki/List_of_highest-grossing_films#Highest-grossing_films_adjusted_for_inflation")
newurltable <- data.frame(readHTMLTable(newurl, header=T, which=1,stringsAsFactors=F))
library(XML)
library(RCurl)
newurl <- getURL("https://en.wikipedia.org/wiki/List_of_highest-grossing_films#Highest-grossing_films_adjusted_for_inflation")
newurltable <- data.frame(readHTMLTable(newurl, header=T, which=1,stringsAsFactors=F))
View(newurltable)
require(ggplot2)
setwd("/home/sahil/Documents/FDS/Assignment1/")
GFTdata <- read.csv("data.txt", head = TRUE, sep = ",", skip=588) #only get 2015 data into the dataframe
header <- read.csv("data.txt", nrows = 1, header = FALSE, sep =',', stringsAsFactors = FALSE) #this step extracts the first row i.e the names of the columns
colnames(GFTdata) <- unlist(header) #this step attaches those names to GFTdata dataframe
GFTdata <- GFTdata[3:53] #only get the 50 states and ignore the rest columns
colMax <- function(data) sapply(data, max, na.rm = TRUE) #find the maximum of the columns
Peakflu <- data.frame(colMax(GFTdata)) #apply the maximum function to the GFTdata dataframe
colnames(Peakflu)[1] <- "PeakLevel"
Peakflu[,2] <- colnames(GFTdata)
colnames(Peakflu)[2] <- "names"
Populationdata<-read.csv("NST-EST2015-alldata.csv",head=TRUE,sep=",")
Populationstates<- data.frame(Populationdata[,5], Populationdata[,13]) #this steps get the requisite fields into a new dataframe namely state name and the population
colnames(Populationstates)[1] <- "name"
colnames(Populationstates)[2] <- "population2015"
mergeState<-data.frame(merge(Peakflu ,Populationstates, by.x=c("names"),by.y=c("name"))) #this is a step to merge two dataframe on a common field. this is essentially an inner join. (see references)[1]
mergedstate <- mergeState
mergedstate$population2015 <- findInterval(mergedstate$population2015,c(5000000,10000000,15000000,20000000,25000000,30000000,35000000))  #this divides the flu level into groups and assigns 1 if it Peaklevel lies between(0,5000000), 2 if it lies between(5000000,10000000), 3 for(10000000,15000000) and on and on.
cut_number(mergeState$PeakLevel, n = 10)
cut_number(sumsq$difftim, n = 10)
mergedstate1 <- mergeState
cut_number(mergedstate1$PeakLevel, n = 10)
mergedstate1$PeakLevel <- findInterval(mergedstate1$PeakLevel,cut_number(mergedstate1$PeakLevel, n = 10))
mergedstate1$PeakLevel <- findInterval(mergedstate1$PeakLevel,sort(cut_number(mergedstate1$PeakLevel, n = 10))
sa
mergedstate1$PeakLevel <- findInterval(mergedstate1$PeakLevel,sort(cut_number(mergedstate1$PeakLevel, n = 10)))
View(mergedstate1)
sort(cut_number(mergedstate1$PeakLevel, n = 10))
mergedstate1 <- mergeState
sort(cut_number(mergedstate1$PeakLevel, n = 10))
df <-data.frame(sort(cut_number(mergedstate1$PeakLevel, n = 10)))
View(df)
df <-data.frame(sort(unique(cut_number(mergedstate1$PeakLevel, n = 10))))
View(df)
mergedstate1$PeakLevel <- findInterval(mergedstate1$PeakLevel,df)
View(df)
colnames(df) <- "levels"
mergedstate1$PeakLevel <- findInterval(mergedstate1$PeakLevel,df$levels)
View(mergedstate1)
mergedstate1 <- mergeState
df <-data.frame(sort(unique(cut_number(mergedstate1$PeakLevel, n = 10))))
colnames(df) <- "levels"
mergedstate1$PeakLevel <- as.numeric(as.character(mergedstate1$PeakLevel))
View(mergedstate1)
View(df)
?average
?mean
df <-data.frame(sort(unique(mean((cut_number(mergedstate1$PeakLevel, n = 10))))))
?cut_number()
mergedstate1 <- mergeState
df <-data.frame(sort(cut_number(mergedstate1, n = 10)))
df <-data.frame(sort(cut_number(mergedstate1[,-1], n = 10)))
View(mergedstate1)
df <-data.frame(sort(cut_number(mergedstate1[,-1], n = 10)))
df <-(sort(cut_number(mergedstate1$PeakLevel, n = 10)))
mergedstate1$PeakLevel <-(sort(cut_number(mergedstate1$PeakLevel, n = 10)))
View(mergedstate1)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(sort(cut_number(mergedstate1$PeakLevel, n = 10)))
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
View(df0)
df0 <- data.frame(aggregate(mergedstate1, list(mergedstate1$Bin),mean, na.rm = T))
View(df0)
mergedstate1$PeakLevel <- aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T)
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
View(df0)
replace(mergedstate1$Bin, df0$Group.1, df0$x)
View(mergedstate1)
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
?replace
mergedstate1$Bin<-replace(mergedstate1$Bin, df0$Group.1, df0$x)
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
mergedstate1$Bin<-data.frame(replace(mergedstate1$Bin, df0$Group.1, df0$x))
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
mergedstate1$Bin[df0$Group.1] <- df0$x
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
mergedstate1$Bin[mergedstate1$Bin == df0$Group.1] <- df0$x
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
mergedstate1$Bin[mergedstate1$Bin = df0$Group.1] <- df0$x
as.character(mergedstate1$Bin)
mergedstate1$Bin<- as.character(mergedstate1$Bin)
df0$Group.1 <- as.character(df0$Group.1)
mergedstate1$Bin[mergedstate1$Bin == df0$Group.1] <- df0$x
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
mergedstate1$Bin<- as.character(mergedstate1$Bin)
df0$Group.1 <- as.character(df0$Group.1)
mergedstate1$Bin[mergedstate1$Bin == df0$Group.1,] <- df0$x
map = setNames(df0$Group.1, df0$x)
mergedstate1$Bin <- map[unlist(mergedstate1$Bin)]
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
mergedstate1$Bin<- as.character(mergedstate1$Bin)
df0$Group.1 <- as.character(df0$Group.1)
map = setNames(df0$Group.1, df0$x)
mergedstate1$Bin[] <- map[unlist(mergedstate1$Bin)]
map
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10))
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T))
mergedstate1$Bin<- as.character(mergedstate1$Bin)
df0$Group.1 <- as.character(df0$Group.1)
install.packages("plyr")
install.packages("plyr")
mergedstate1$Bin <- mapvalues(mergedstate1$Bin, from=df0$Group.1, to=df0$x)
require(plyr)
mergedstate1$Bin <- mapvalues(mergedstate1$Bin, from=df0$Group.1, to=df0$x)
plot(mergedstate1$Bin, mergedstate1$population2015, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Categorical Population vs Peak Flu")
plot(mergedstate1$Bin, mergedstate1$population2015, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Continuous  Population vs Categorical Peak Flu")
require(ggplot2)
mergedstate1[,"PopBin"] <-(cut_number(mergedstate1$population2015, n = 10))
df2 <- data.frame(aggregate(mergedstate1$population2015, list(mergedstate1$PopBin),mean, na.rm = T))
mergedstate1$PopBin<- as.character(mergedstate1$PopBin)
df2$Group.1 <- as.character(df2$Group.1)
require(plyr)
mergedstate1$PopBin <- mapvalues(mergedstate1$PopBin, from=df2$Group.1, to=df2$x)
plot(mergedstate1$Bin, mergedstate1$PopBin, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Continuous  Population vs Categorical Peak Flu")
plot(mergedstate$PeakLevel,mergedstate$population2015,xlab="Peak Values", ylab="Population", main="Population v. Peak Flu")
cor(mergeState)
cor(mergeState[,-1])
plot(mergeState$PeakLevel,mergeState$population2015,xlab="Peak Values", ylab="Population", main="Population v. Peak Flu")
plot(mergedstate1$Bin, mergedstate1$PopBin, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Categorical  Population vs Categorical Peak Flu")
plot(mergedstate1$Bin, mergedstate1$population2015, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Continuous  Population vs Categorical Peak Flu")
plot(mergedstate1$Bin, mergedstate1$PopBin, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Categorical  Population vs Categorical Peak Flu")
cor(mergedstate1[,-1])
cor(as.numeric(mergedstate1[,-1]))
cor(as.numeric(mergedstate1[,-1]))
mergedstate1$Bin<-as.numeric(mergedstate1$Bin)
cor(as.numeric(mergedstate1[,-1]))
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"Bin"] <-(cut_number(mergedstate1$PeakLevel, n = 10)) #this creates the bins
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$Bin),mean, na.rm = T)) #this performs smoothing based on means
mergedstate1$Bin<- as.character(mergedstate1$Bin)
df0$Group.1 <- as.character(df0$Group.1)
require(plyr)
mergedstate1$Bin <- mapvalues(mergedstate1$Bin, from=df0$Group.1, to=df0$x)
plot(mergedstate1$Bin, mergedstate1$population2015, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Continuous  Population vs Categorical Peak Flu")
mergedstate1$Bin<-as.numeric(mergedstate1$Bin)
cor(as.numeric(mergedstate1[,-1]))
cor((mergedstate1[,-1]))
plot(mergedstate1$PeakLevel, mergedstate1$PopBin, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Categorical  Population vs Categorical Peak Flu")
require(ggplot2)
#mergedstate1 <- mergeState
mergedstate1[,"PopBin"] <-(cut_number(mergedstate1$population2015, n = 10))
df2 <- data.frame(aggregate(mergedstate1$population2015, list(mergedstate1$PopBin),mean, na.rm = T))
mergedstate1$PopBin<- as.character(mergedstate1$PopBin)
df2$Group.1 <- as.character(df2$Group.1)
require(plyr)
mergedstate1$PopBin <- mapvalues(mergedstate1$PopBin, from=df2$Group.1, to=df2$x)
plot(mergedstate1$PeakLevel, mergedstate1$PopBin, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Categorical  Population vs Categorical Peak Flu")
plot(mergedstate1$Bin, mergedstate1$PopBin, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Categorical  Population vs Continuous Peak Flu")
mergedstate1$PopBin <- as.numeric(mergedstate1$PopBin)
cor(mergedstate1[,-1]
whi
cor(mergedstate1[,-1])
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"FluBin"] <-(cut_number(mergedstate1$PeakLevel, n = 10)) #this creates the bins
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$FluBin),mean, na.rm = T)) #this performs smoothing based on means
mergedstate1$FluBin<- as.character(mergedstate1$FluBin)
df0$Group.1 <- as.character(df0$Group.1)
require(plyr)
mergedstate1FluBin <- mapvalues(mergedstate1$FluBin, from=df0$Group.1, to=df0$x)
plot(mergedstate1$FluBin, mergedstate1$population2015, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Continuous  Population vs Categorical Peak Flu")
mergedstate1$FluBin<-as.numeric(mergedstate1$FluBin)
cor((mergedstate1[,-1]))
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"FluBin"] <-(cut_number(mergedstate1$PeakLevel, n = 10)) #this creates the bins
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$FluBin),mean, na.rm = T)) #this performs smoothing based on means
mergedstate1$FluBin<- as.character(mergedstate1$FluBin)
df0$Group.1 <- as.character(df0$Group.1)
require(plyr)
mergedstate1FluBin <- mapvalues(mergedstate1$FluBin, from=df0$Group.1, to=df0$x)
plot(mergedstate1$FluBin, mergedstate1$population2015, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Continuous  Population vs Categorical Peak Flu")
require(ggplot2)
mergedstate1 <- mergeState
mergedstate1[,"FluBin"] <-(cut_number(mergedstate1$PeakLevel, n = 10)) #this creates the bins
df0 <- data.frame(aggregate(mergedstate1$PeakLevel, list(mergedstate1$FluBin),mean, na.rm = T)) #this performs smoothing based on means
mergedstate1$FluBin<- as.character(mergedstate1$FluBin)
df0$Group.1 <- as.character(df0$Group.1)
require(plyr)
mergedstate1$FluBin <- mapvalues(mergedstate1$FluBin, from=df0$Group.1, to=df0$x)
plot(mergedstate1$FluBin, mergedstate1$population2015, xlab = "Equal Frequency Mean Smoothing Binning", ylab = "Population", main = "Continuous  Population vs Categorical Peak Flu")
mergedstate1$FluBin<-as.numeric(mergedstate1$FluBin)
cor((mergedstate1[,-1]))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE, root.dir='./Assignment1/')
library(knitr)
rawdata <- read.csv("data.txt", head = TRUE, sep = ",")
opts_knit$set(root.dir='home/sahil/Documents/FDS/Assignment1')
View(header)
opts_knit$set(root.dir='home/sahil/Documents/FDS/Assignment1')
cor(mergeState[,-1])
newurl <- getURL("https://en.wikipedia.org/wiki/2015_United_States_H5N2_outbreak")
newurltable <- data.frame(readHTMLTable(newurl, header=T, which=1,stringsAsFactors=F))
View(newurltable)
newurl <- getURL("https://en.wikipedia.org/wiki/Air_Quality_Health_Index_(Canada)")
newurltable <- data.frame(readHTMLTable(newurl, header=T, which=1,stringsAsFactors=F))
View(newurltable)
newurl <- getURL("https://en.wikipedia.org/wiki/List_of_highest-grossing_films")
newurltable <- data.frame(readHTMLTable(newurl, header=T, which=1,stringsAsFactors=F))
View(newurltable)
newurltable <- data.frame(readHTMLTable(newurl, header=T, which=1,stringsAsFactors=F))
newurltable <- newurltable[,-6]
plot(mergedcountries$Peaklevel,mergedcountries$latitude,xlab="Peak Values",
ylab="latitudes", main="latitude vs Peak week values")
library("XML")
library("RCurl")
#setwd("/home/sahil/Documents/FDS/Assignment1/")
URL<-getURL("https://developers.google.com/public-data/docs/canonical/countries_csv")
htmltable <-data.frame(readHTMLTable(URL,header = TRUE,as.data.frame = TRUE,which=1))
countrylatitude <- htmltable[,c("latitude","name")]
#load world data from GFT and skip directly to the latest year i.e. 2015
worlddata <- read.csv("worlddata.txt", head=TRUE, sep = ",", skip=627)
header <- read.csv("worlddata.txt", nrows = 1, header = FALSE, sep =',', stringsAsFactors = FALSE)
colnames(worlddata) <- unlist(header)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
Peakworld <- data.frame(colMax(worlddata[,2:30]))  #apply maximum function on all columns except Date
colnames(Peakworld)[1] <- "Peaklevel"
Peakworld[,2] <- rownames(Peakworld)
colnames(Peakworld)[2] <- "names"
mergedcountries<-data.frame(merge(Peakworld , countrylatitude, by.x=c("names"),by.y=c("name"))) #[1]
kable(mergedcountries, format = "markdown")
mergedcountries$latitude = as.numeric(as.character(mergedcountries$latitude))
plot(mergedcountries$Peaklevel,mergedcountries$latitude,xlab="Peak Values",
ylab="latitudes", main="latitude vs Peak week values")
cor(mergedcountries[,-1])
library(knitr)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
#opts_knit$set(root.dir='home/sahil/Documents/FDS/Assignment1')
rawdata <- read.csv("data.txt", head = TRUE, sep = ",")
library(ggplot2)
rawdata$Date <-as.Date(as.character(rawdata$Date))
ggplot(rawdata, aes(rawdata$Date, rawdata$United.States)) +
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level")
library(ggplot2)
rawdata$Date <-as.Date(as.character(rawdata$Date))
ggplot(rawdata, aes(rawdata$Date, rawdata$United.States)) +
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level")+main('Weekly Timeseries')
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level") + ggtitle('Weekly Time Series')
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level")
rawdata$Date <-as.Date(as.character(rawdata$Date))
ggplot(rawdata, aes(rawdata$Date, rawdata$United.States)) +
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level")
```
rawdata$Date <-as.Date(as.character(rawdata$Date))
ggplot(rawdata, aes(rawdata$Date, rawdata$United.States)) +
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level")
rawdata$Date <-as.Date(as.character(rawdata$Date))
ggplot(rawdata, aes(rawdata$Date, rawdata$United.States)) +
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level") + ggtitle("ABC")
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level") + ggtitle("Weekly Time Series")
rawdata$Date <-as.Date(as.character(rawdata$Date))
ggplot(rawdata, aes(rawdata$Date, rawdata$United.States)) +
geom_line() + scale_x_date(date_labels = "%b %Y") + xlab("Weekly") + ylab("Flu level") + ggtitle("Weekly Time Series")
yearly <- paste(year(rawdata$Date))
yearlydata <- data.frame(aggregate(rawdata, list(yearly),mean, na.rm = T))
yearlymaxdata  <- data.frame(aggregate(rawdata, list(yearly),FUN = max, na.rm = T))
ggplot(yearlydata, aes(yearlydata$Date, yearlydata$United.States)) +
geom_line() + scale_x_date(date_labels = "%Y") + xlab("Yearly") + ylab("Mean Flu level") +
ggtitle("Yearly Mean time series")
ggplot(yearlymaxdata, aes(yearlymaxdata$Date, yearlymaxdata$United.States)) +
geom_line() + scale_x_date(date_labels = "%Y") + xlab("Yearly") + ylab("Max Flu level") +
ggtitle("Yearly Max Time Series")
yearly <- paste(year(rawdata$Date))
library(lubridate)
yearly <- paste(year(rawdata$Date))
yearlydata <- data.frame(aggregate(rawdata, list(yearly),mean, na.rm = T))
yearlymaxdata  <- data.frame(aggregate(rawdata, list(yearly),FUN = max, na.rm = T))
View(yearlymaxdata)
View(yearlydata)
ggplot(yearlydata, aes(yearlydata$Date, yearlydata$United.States)) +
geom_line() + scale_x_date(date_labels = "%Y") + xlab("Yearly") + ylab("Mean Flu level") +
ggtitle("Yearly Mean time series")
Arizonacities <- data.frame(rawdata$Date, rawdata$Mesa..AZ, rawdata$Phoenix..AZ,
rawdata$Scottsdale..AZ, rawdata$Tempe..AZ, rawdata$Tucson..AZ)
colnames(Arizonacities) <- c("Date", "Mesa..AZ", "Phoenix..AZ", "Scottsdale..AZ",
"Tempe..AZ" , "Tucson..AZ")
Arizonacities$Mesa..AZ <- as.numeric(as.character(Arizonacities$Mesa..AZ))
Arizonacities$Phoenix..AZ <- as.numeric(as.character(Arizonacities$Phoenix..AZ))
Arizonacities$Tempe..AZ <- as.numeric(as.character(Arizonacities$Tempe..AZ))
Arizonacities$Tucson..AZ<- as.numeric(as.character(Arizonacities$Tucson..AZ))
Arizonacities$Scottsdale..AZ <- as.numeric(as.character(Arizonacities$Scottsdale..AZ))
Arizonacities$Date = as.Date(as.character(Arizonacities$Date))
library(lubridate)
month <- paste(month(Arizonacities$Date))
monthdf<- data.frame(aggregate(Arizonacities, list(month),mean, na.rm = T))
colnames(monthdf)[1]<- "month"
meltDatamonth <- melt(monthdf , id = c("Date", "month"))
year <- paste(year(Arizonacities$Date))
yeardf <- data.frame(aggregate(Arizonacities, list(year),mean, na.rm = T))
colnames(yeardf)[1]<- "year"
meltyear <- melt(yeardf, id = c("Date" , "year"))
library(lubridate)
library(reshape2)
month <- paste(month(Arizonacities$Date))
monthdf<- data.frame(aggregate(Arizonacities, list(month),mean, na.rm = T))
colnames(monthdf)[1]<- "month"
meltDatamonth <- melt(monthdf , id = c("Date", "month"))
year <- paste(year(Arizonacities$Date))
yeardf <- data.frame(aggregate(Arizonacities, list(year),mean, na.rm = T))
colnames(yeardf)[1]<- "year"
meltyear <- melt(yeardf, id = c("Date" , "year"))
ggplot(meltDatamonth, aes((meltDatamonth$month), meltDatamonth$value,
fill = meltDatamonth$variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
View(monthdf)
ggplot(meltDatamonth, aes(as.numeric(meltDatamonth$month), meltDatamonth$value,
fill = meltDatamonth$variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(meltDatamonth, aes(factor(meltDatamonth$month), meltDatamonth$value,
fill = meltDatamonth$variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
library("XML")
library("RCurl")
#setwd("/home/sahil/Documents/FDS/Assignment1/")
URL<-getURL("https://developers.google.com/public-data/docs/canonical/countries_csv")
htmltable <-data.frame(readHTMLTable(URL,header = TRUE,as.data.frame = TRUE,which=1))
countrylatitude <- htmltable[,c("latitude","name")]
#load world data from GFT and skip directly to the latest year i.e. 2015
worlddata <- read.csv("worlddata.txt", head=TRUE, sep = ",", skip=627)
header <- read.csv("worlddata.txt", nrows = 1, header = FALSE, sep =',', stringsAsFactors = FALSE)
colnames(worlddata) <- unlist(header)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
Peakworld <- data.frame(colMax(worlddata[,2:30]))  #apply maximum function on all columns except Date
colnames(Peakworld)[1] <- "Peaklevel"
Peakworld[,2] <- rownames(Peakworld)
colnames(Peakworld)[2] <- "names"
mergedcountries<-data.frame(merge(Peakworld , countrylatitude, by.x=c("names"),by.y=c("name"))) #[1]
View(mergedcountries)
View(worlddata)
View(Peakworld)
View(worlddata)
View(worlddata)
colmax(worlddata[,2:30])
colMax(worlddata[,2:30])
colindexmax <- function(data)sapply(data,which.max)
Peakweek <- function(data,indice){
for(i in length(indice))
{
indice <- data$Date[indice]
}
return (indice)
}
worlddata.Peakweek <- colindexmax(worlddata[,2:30])
View(worlddata)
worlddata.Peakweek
indexweek <- colindexmax(worlddata[,2:30])
Peakweek1 <- as.Date(Peakweek(worlddata,indexweek))
Peakweek1
Peakweek1 <- data.frame(as.Date(Peakweek(worlddata,indexweek)))
View(Peakweek1)
Peakweek1[,"name"] = colnames(worlddata)[2:30]
Peakweek1[,"Date"] <- data.frame(as.Date(Peakweek(worlddata,indexweek)))
Peakweek1[,"names"] = colnames(worlddata)[2:30]
Peakweek1 <- Peakweek1[,!"name"]
Peakweek1 <- Peakweek1[,-"name"]
Peakweek1 <- Peakweek1[,-2]
Peakweek1 <- Peakweek1[,-1]
mergedcountries1<-data.frame(merge(Peakweek1 , countrylatitude, by.x=c("names"),by.y=c("name"))) #[1]
View(mergedstate1)
View(mergedcountries1)
plot(mergedcountries1$Date,mergedcountries1$latitude,xlab="Peak Values",
ylab="latitudes", main="latitude vs Peak week values")
mergedcountries1$latitude = as.numeric(as.character(mergedcountries1$latitude))
plot(mergedcountries1$Date,mergedcountries1$latitude,xlab="Peak Values",
ylab="latitudes", main="latitude vs Peak week values")
cor(mergedcountries1[,-1])
View(Peakweek1)
df$Date[apply(worlddata[,3:30],2,which.max)]
worlddata$Date[apply(worlddata[,3:30],2,which.max)]
View(Peakweek1)
worlddata$Date[apply(worlddata[,2:30],2,which.max)]
Peakweek2 <- data.frame(as.Date(worlddata$Date[apply(worlddata[,2:30],2,which.max)]))
View(Peakweek2)
